{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the PhoneInfoga wiki ! PhoneInfoga is one of the most advanced tools to scan phone numbers using only free resources. The goal is to first gather standard information such as country, area, carrier and line type on any international phone numbers with a very good accuracy. Then search for footprints on search engines to try to find the VoIP provider or identify the owner. Read the related blog post Features Check if phone number exists and is possible Gather standard informations such as country, line type and carrier OSINT footprinting using external APIs, Google Hacking, phone books & search engines Check for reputation reports, social media, disposable numbers and more Scan several numbers at once Use custom formatting for more effective OSINT reconnaissance Automatic footprinting on several custom formats Bug report Found a bug ? Feel free to open an issue . You can also reach me on Twitter or at raphael(at)crvx.fr. PGP: B64687AB97F268F43E67B97A8916203E540C65A4 Contribute Want to contribute ? Clone and open some pull requests ! Support If you like this project and you want to support my work, please consider supporting me on Patreon \ud83d\udc4d Thank you!","title":"Introduction"},{"location":"#welcome-to-the-phoneinfoga-wiki","text":"PhoneInfoga is one of the most advanced tools to scan phone numbers using only free resources. The goal is to first gather standard information such as country, area, carrier and line type on any international phone numbers with a very good accuracy. Then search for footprints on search engines to try to find the VoIP provider or identify the owner.","title":"Welcome to the PhoneInfoga wiki !"},{"location":"#read-the-related-blog-post","text":"","title":"Read the related blog post"},{"location":"#features","text":"Check if phone number exists and is possible Gather standard informations such as country, line type and carrier OSINT footprinting using external APIs, Google Hacking, phone books & search engines Check for reputation reports, social media, disposable numbers and more Scan several numbers at once Use custom formatting for more effective OSINT reconnaissance Automatic footprinting on several custom formats","title":"Features"},{"location":"#bug-report","text":"Found a bug ? Feel free to open an issue . You can also reach me on Twitter or at raphael(at)crvx.fr. PGP: B64687AB97F268F43E67B97A8916203E540C65A4","title":"Bug report"},{"location":"#contribute","text":"Want to contribute ? Clone and open some pull requests !","title":"Contribute"},{"location":"#support","text":"If you like this project and you want to support my work, please consider supporting me on Patreon \ud83d\udc4d Thank you!","title":"Support"},{"location":"contribute/","text":"Contribute This page describe the project structure and gives you a bit of help to start developing. The project is maintained by a single person: sundowndev . Contributions are welcome. You want to contribute ? Clone the project and open some pull requests ! Project Installation See the installation page to install the project. Structure \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 contribute.md \u2502 \u251c\u2500\u2500 formatting.md \u2502 \u251c\u2500\u2500 googlesearch.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 install.md \u2502 \u251c\u2500\u2500 resources.md \u2502 \u2514\u2500\u2500 usage.md \u251c\u2500\u2500 examples \u2502 \u251c\u2500\u2500 generate.sh \u2502 \u251c\u2500\u2500 input.txt \u2502 \u251c\u2500\u2500 output_from_input.txt \u2502 \u2514\u2500\u2500 output_single.txt \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 args.py \u2502 \u251c\u2500\u2500 banner.py \u2502 \u251c\u2500\u2500 colors.py \u2502 \u251c\u2500\u2500 format.py \u2502 \u251c\u2500\u2500 googlesearch.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 logger.py \u2502 \u251c\u2500\u2500 output.py \u2502 \u2514\u2500\u2500 request.py \u251c\u2500\u2500 osint \u2502 \u251c\u2500\u2500 disposable_num_providers.json \u2502 \u251c\u2500\u2500 individuals.json \u2502 \u251c\u2500\u2500 reputation.json \u2502 \u2514\u2500\u2500 social_medias.json \u251c\u2500\u2500 scanners \u2502 \u251c\u2500\u2500 footprints.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 localscan.py \u2502 \u251c\u2500\u2500 numverify.py \u2502 \u251c\u2500\u2500 ovh.py \u2502 \u2514\u2500\u2500 recon.py \u251c\u2500\u2500 config.example.py \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 phoneinfoga.py \u251c\u2500\u2500 README.md \u2514\u2500\u2500 requirements.txt Documentation We use mkdocs to write our documentation. Install mkdocs python3 -m pip install mkdocs Serve documentation on localhost mkdocs serve Deploy on github pages mkdocs gh-deploy","title":"Contribute"},{"location":"contribute/#contribute","text":"This page describe the project structure and gives you a bit of help to start developing. The project is maintained by a single person: sundowndev . Contributions are welcome. You want to contribute ? Clone the project and open some pull requests !","title":"Contribute"},{"location":"contribute/#project","text":"","title":"Project"},{"location":"contribute/#installation","text":"See the installation page to install the project.","title":"Installation"},{"location":"contribute/#structure","text":"\u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 contribute.md \u2502 \u251c\u2500\u2500 formatting.md \u2502 \u251c\u2500\u2500 googlesearch.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 install.md \u2502 \u251c\u2500\u2500 resources.md \u2502 \u2514\u2500\u2500 usage.md \u251c\u2500\u2500 examples \u2502 \u251c\u2500\u2500 generate.sh \u2502 \u251c\u2500\u2500 input.txt \u2502 \u251c\u2500\u2500 output_from_input.txt \u2502 \u2514\u2500\u2500 output_single.txt \u251c\u2500\u2500 lib \u2502 \u251c\u2500\u2500 args.py \u2502 \u251c\u2500\u2500 banner.py \u2502 \u251c\u2500\u2500 colors.py \u2502 \u251c\u2500\u2500 format.py \u2502 \u251c\u2500\u2500 googlesearch.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 logger.py \u2502 \u251c\u2500\u2500 output.py \u2502 \u2514\u2500\u2500 request.py \u251c\u2500\u2500 osint \u2502 \u251c\u2500\u2500 disposable_num_providers.json \u2502 \u251c\u2500\u2500 individuals.json \u2502 \u251c\u2500\u2500 reputation.json \u2502 \u2514\u2500\u2500 social_medias.json \u251c\u2500\u2500 scanners \u2502 \u251c\u2500\u2500 footprints.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 localscan.py \u2502 \u251c\u2500\u2500 numverify.py \u2502 \u251c\u2500\u2500 ovh.py \u2502 \u2514\u2500\u2500 recon.py \u251c\u2500\u2500 config.example.py \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 phoneinfoga.py \u251c\u2500\u2500 README.md \u2514\u2500\u2500 requirements.txt","title":"Structure"},{"location":"contribute/#documentation","text":"We use mkdocs to write our documentation.","title":"Documentation"},{"location":"contribute/#install-mkdocs","text":"python3 -m pip install mkdocs","title":"Install mkdocs"},{"location":"contribute/#serve-documentation-on-localhost","text":"mkdocs serve","title":"Serve documentation on localhost"},{"location":"contribute/#deploy-on-github-pages","text":"mkdocs gh-deploy","title":"Deploy on github pages"},{"location":"formatting/","text":"Formatting phone numbers Basics The tool only accepts E164 and International formats as input. E164: +3396360XXXX International: +33 9 63 60 XX XX National: 09 63 60 XX XX RFC3966: tel:+33-9-63-60-XX-XX Out-of-country format from US: 011 33 9 63 60 XX XX E.164 formatting for phone numbers entails the following: A + (plus) sign International Country Calling code Local Area code Local Phone number For example, here\u2019s a US-based number in standard local formatting: (415) 555-2671 Here\u2019s the same phone number in E.164 formatting: +14155552671 In the UK, and many other countries internationally, local dialing may require the addition of a '0' in front of the subscriber number. With E.164 formatting, this '0' must usually be removed. For example, here\u2019s a UK-based number in standard local formatting: 020 7183 8750 Here\u2019s the same phone number in E.164 formatting: +442071838750 Custom formatting Sometimes the phone number has footprints but is used with a different formatting. This is a problem because for example if we search for \"+15417543010\", we'll not find web pages that write it that way : \"(541) 754\u20133010\". So the tool use a (optional) custom formatting given by the user to find further and more accurate results. To use this feature properly and make the results more valuable, try to use a format that someone of the number' country would usually use to share the phone number online. For example, French people usually write numbers that way online : 06.20.30.40.50 or 06 20 30 40 50 . For US-based numbers, the most common format is : 543-456-1234 . Examples Here are some examples of custom formatting for US-based phone numbers : +1 618-555-xxxx (+1)618-555-xxxx +1/618-555-xxxx (618) 555xxxx (618) 555-xxxx (618) 555.xxxx (618)555xxxx (618)555-xxxx (618)555.xxxx For European countries (France as example) : +3301 86 48 xx xx +33018648xxxx +33018 648 xxx x (0033)018648xxxx (+33)018 648 xxx x +33/018648xxxx (0033)018 648 xxx x +33018-648-xxx-x (+33)018648xxxx (+33)01 86 48 xx xx +33/018-648-xxx-x +33/01-86-48-xx-xx +3301-86-48-xx-xx (0033)01 86 48 xx xx +33/01 86 48 xx xx (+33)018-648-xxx-x (+33)01-86-48-xx-xx (0033)01-86-48-xx-xx (0033)018-648-xxx-x +33/018 648 xxx x Local scan formatting (developers) The local scan create several variables to be usable in OSINT footprinting and other scanners. Examples : { 'input': '+1 512-618-xxxx', 'default': '1512618xxxx', 'local': '512618xxxx', 'international': '+1 512-618-xxxx', 'country': 'United States', 'countryCode': '+1', 'countryIsoCode': 'US', 'location': 'Texas', 'carrier': '' } { 'input': '+33 066651xxxx', 'default': '3366651xxxx', 'local': '66651xxxx', 'international': '+33 66651xxxx', 'country': 'France', 'countryCode': '+33', 'countryIsoCode': 'FR', 'location': 'France', 'carrier': 'Bouygues' }","title":"Formatting phone numbers"},{"location":"formatting/#formatting-phone-numbers","text":"","title":"Formatting phone numbers"},{"location":"formatting/#basics","text":"The tool only accepts E164 and International formats as input. E164: +3396360XXXX International: +33 9 63 60 XX XX National: 09 63 60 XX XX RFC3966: tel:+33-9-63-60-XX-XX Out-of-country format from US: 011 33 9 63 60 XX XX E.164 formatting for phone numbers entails the following: A + (plus) sign International Country Calling code Local Area code Local Phone number For example, here\u2019s a US-based number in standard local formatting: (415) 555-2671 Here\u2019s the same phone number in E.164 formatting: +14155552671 In the UK, and many other countries internationally, local dialing may require the addition of a '0' in front of the subscriber number. With E.164 formatting, this '0' must usually be removed. For example, here\u2019s a UK-based number in standard local formatting: 020 7183 8750 Here\u2019s the same phone number in E.164 formatting: +442071838750","title":"Basics"},{"location":"formatting/#custom-formatting","text":"Sometimes the phone number has footprints but is used with a different formatting. This is a problem because for example if we search for \"+15417543010\", we'll not find web pages that write it that way : \"(541) 754\u20133010\". So the tool use a (optional) custom formatting given by the user to find further and more accurate results. To use this feature properly and make the results more valuable, try to use a format that someone of the number' country would usually use to share the phone number online. For example, French people usually write numbers that way online : 06.20.30.40.50 or 06 20 30 40 50 . For US-based numbers, the most common format is : 543-456-1234 .","title":"Custom formatting"},{"location":"formatting/#examples","text":"Here are some examples of custom formatting for US-based phone numbers : +1 618-555-xxxx (+1)618-555-xxxx +1/618-555-xxxx (618) 555xxxx (618) 555-xxxx (618) 555.xxxx (618)555xxxx (618)555-xxxx (618)555.xxxx For European countries (France as example) : +3301 86 48 xx xx +33018648xxxx +33018 648 xxx x (0033)018648xxxx (+33)018 648 xxx x +33/018648xxxx (0033)018 648 xxx x +33018-648-xxx-x (+33)018648xxxx (+33)01 86 48 xx xx +33/018-648-xxx-x +33/01-86-48-xx-xx +3301-86-48-xx-xx (0033)01 86 48 xx xx +33/01 86 48 xx xx (+33)018-648-xxx-x (+33)01-86-48-xx-xx (0033)01-86-48-xx-xx (0033)018-648-xxx-x +33/018 648 xxx x","title":"Examples"},{"location":"formatting/#local-scan-formatting-developers","text":"The local scan create several variables to be usable in OSINT footprinting and other scanners. Examples : { 'input': '+1 512-618-xxxx', 'default': '1512618xxxx', 'local': '512618xxxx', 'international': '+1 512-618-xxxx', 'country': 'United States', 'countryCode': '+1', 'countryIsoCode': 'US', 'location': 'Texas', 'carrier': '' } { 'input': '+33 066651xxxx', 'default': '3366651xxxx', 'local': '66651xxxx', 'international': '+33 66651xxxx', 'country': 'France', 'countryCode': '+33', 'countryIsoCode': 'FR', 'location': 'France', 'carrier': 'Bouygues' }","title":"Local scan formatting (developers)"},{"location":"googlesearch/","text":"Dealing with Google captcha Using Google API key If you have a Google search console API key, all you have to do is to edit the file config.py and fill it with your credentials. If you leave fields empty, the tool will automatically use the default search feature described below. How to create a Google Custom Search Engine API key and CX id CX id : Go to https://cse.google.com/cse/create/new to create a new search engine Fill the form with a fake domain site like example.com Select English as language Give any name to your search engine and click on Create button Go to https://cse.google.com/cse/all again and click on the search engine you just created. Select all entries in \"Sites to search\" and delete them Turn \"Search the entire web\" to ON Click on the \"Search engine ID\" button and copy your search engine id. This is the value for google_cx_id field in config.py file CSE API key : Go to https://console.developers.google.com/apis/credentials Click on \"Create credentials\" and select API key Copy the API key and click on close button. This is the value for google_api_key field in the config.py file Be sure to restrict the API key to \"Custom Search API\" Using the webdriver By default, PhoneInfo uses Selenium to handle Google search feature. When running OSINT scans, you will usually be blacklisted very easily by Google, which will ask the tool to complete a captcha. Nothing more simple, just complete the captcha that appears on the firefox window. Then press ENTER in the CLI to tell the tool it can continue the scanning process. Still having issues with Google captcha ? Please open an issue . Be careful, the cookie contain your IP address.","title":"Dealing with Google captcha"},{"location":"googlesearch/#dealing-with-google-captcha","text":"","title":"Dealing with Google captcha"},{"location":"googlesearch/#using-google-api-key","text":"If you have a Google search console API key, all you have to do is to edit the file config.py and fill it with your credentials. If you leave fields empty, the tool will automatically use the default search feature described below.","title":"Using Google API key"},{"location":"googlesearch/#how-to-create-a-google-custom-search-engine-api-key-and-cx-id","text":"CX id : Go to https://cse.google.com/cse/create/new to create a new search engine Fill the form with a fake domain site like example.com Select English as language Give any name to your search engine and click on Create button Go to https://cse.google.com/cse/all again and click on the search engine you just created. Select all entries in \"Sites to search\" and delete them Turn \"Search the entire web\" to ON Click on the \"Search engine ID\" button and copy your search engine id. This is the value for google_cx_id field in config.py file CSE API key : Go to https://console.developers.google.com/apis/credentials Click on \"Create credentials\" and select API key Copy the API key and click on close button. This is the value for google_api_key field in the config.py file Be sure to restrict the API key to \"Custom Search API\"","title":"How to create a Google Custom Search Engine API key and CX id"},{"location":"googlesearch/#using-the-webdriver","text":"By default, PhoneInfo uses Selenium to handle Google search feature. When running OSINT scans, you will usually be blacklisted very easily by Google, which will ask the tool to complete a captcha. Nothing more simple, just complete the captcha that appears on the firefox window. Then press ENTER in the CLI to tell the tool it can continue the scanning process. Still having issues with Google captcha ? Please open an issue . Be careful, the cookie contain your IP address.","title":"Using the webdriver"},{"location":"install/","text":"To install PhoneInfoga, you'll need to download source code then install dependencies. Requirements : python3 and python3-pip OR Docker git OR wget and curl Manual installation Clone the repository git clone https://github.com/sundowndev/PhoneInfoga cd PhoneInfoga/ You can also download the source code archive : wget $(curl -s https://api.github.com/repos/sundowndev/phoneinfoga/releases/latest | grep tarball_url | cut -d '\"' -f 4) -O PhoneInfoga.tar.gz tar -xvzf PhoneInfoga.tar.gz cd sundowndev* Install requirements python3 -m pip install -r requirements.txt Create the config file cp config.example.py config.py To ensure everything works, use the -v option to show the version : python3 phoneinfoga.py -v Install the Geckodriver Linux Go to the geckodriver releases page . Find the latest version of the driver for your platform and download it. For example: wget https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz Extract the file with: tar xvfz geckodriver-v0.24.0-linux64.tar.gz Make it executable: chmod +x geckodriver Add the driver to your PATH so other tools can find it: export PATH=$PATH:/path-to-extracted-file/. Windows or MacOS Go to the geckodriver releases page . Find the latest version of the driver for your platform and download it. Extract the archive Run the executable and follow the instructions Using Docker From docker hub You can pull the repository directly from Docker hub docker pull sundowndev/phoneinfoga:latest Then run the tool docker run --rm -it sundowndev/phoneinfoga --help From the source code Or, you can download the source code, then build the docker image Build docker build --rm=true -t phoneinfoga/latest . Usage docker run --rm -it phoneinfoga/latest --help","title":"Installation"},{"location":"install/#manual-installation","text":"","title":"Manual installation"},{"location":"install/#clone-the-repository","text":"git clone https://github.com/sundowndev/PhoneInfoga cd PhoneInfoga/ You can also download the source code archive : wget $(curl -s https://api.github.com/repos/sundowndev/phoneinfoga/releases/latest | grep tarball_url | cut -d '\"' -f 4) -O PhoneInfoga.tar.gz tar -xvzf PhoneInfoga.tar.gz cd sundowndev*","title":"Clone the repository"},{"location":"install/#install-requirements","text":"python3 -m pip install -r requirements.txt","title":"Install requirements"},{"location":"install/#create-the-config-file","text":"cp config.example.py config.py To ensure everything works, use the -v option to show the version : python3 phoneinfoga.py -v","title":"Create the config file"},{"location":"install/#install-the-geckodriver","text":"","title":"Install the Geckodriver"},{"location":"install/#linux","text":"Go to the geckodriver releases page . Find the latest version of the driver for your platform and download it. For example: wget https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz Extract the file with: tar xvfz geckodriver-v0.24.0-linux64.tar.gz Make it executable: chmod +x geckodriver Add the driver to your PATH so other tools can find it: export PATH=$PATH:/path-to-extracted-file/.","title":"Linux"},{"location":"install/#windows-or-macos","text":"Go to the geckodriver releases page . Find the latest version of the driver for your platform and download it. Extract the archive Run the executable and follow the instructions","title":"Windows or MacOS"},{"location":"install/#using-docker","text":"","title":"Using Docker"},{"location":"install/#from-docker-hub","text":"You can pull the repository directly from Docker hub docker pull sundowndev/phoneinfoga:latest Then run the tool docker run --rm -it sundowndev/phoneinfoga --help","title":"From docker hub"},{"location":"install/#from-the-source-code","text":"Or, you can download the source code, then build the docker image","title":"From the source code"},{"location":"install/#build","text":"docker build --rm=true -t phoneinfoga/latest .","title":"Build"},{"location":"install/#usage","text":"docker run --rm -it phoneinfoga/latest --help","title":"Usage"},{"location":"resources/","text":"Resources Inderstanding phone numbers whitepages.fr/phonesystem Formatting-International-Phone-Numbers National_conventions_for_writing_telephone_numbers Open data api.ovh.com/console/#/telephony countrycode.org countryareacode.net directory.didww.com/area-prefixes numinfo.net gist.github.com/Goles/3196253 Footprinting Both free and premium resources are included. Be careful, the listing of a data source here does not mean it has been verified or is used in the tool. Data might be false. Use it as an OSINT framework. Reputation / fraud scamcallfighters.com signal-arnaques.com whosenumber.info findwhocallsme.com yellowpages.ca phonenumbers.ie who-calledme.com usphonesearch.net whocalled.us quinumero.info Disposable numbers receive-sms-online.com receive-sms-now.com hs3x.com twilio.com freesmsverification.com freeonlinephone.org sms-receive.net smsreceivefree.com receive-a-sms.com receivefreesms.com freephonenum.com receive-smss.com receivetxt.com temp-mails.com receive-sms.com receivesmsonline.net receivefreesms.com sms-receive.net pinger.com (=> textnow.com) receive-a-sms.com k7.net kall8.com faxaway.com receivesmsonline.com receive-sms-online.info sellaite.com getfreesmsnumber.com smsreceiving.com smstibo.com catchsms.com freesmscode.com smsreceiveonline.com smslisten.com sms.sellaite.com smslive.co Individuals Facebook Twitter Instagram Linkedin True People Fast People Background Check Pipl Spytox Makelia IvyCall PhoneSearch 411 USPhone WP Plus Thats Them True Caller Sync.me WhoCallsMe ZabaSearch DexKnows WeLeakInfo OK Caller SearchBug numinfo.net Google dork examples insubject:\"+XXXXXXXXX\" OR insubject:\"+XXXXX\" OR insubject:\"XXXXX XXX XXX\" insubject:\"XXXXXXXXX\" OR intitle:\"XXXXXXXXX\" intext:\"XXXXXXXXX\" ext:doc OR ext:docx OR ext:odt OR ext:pdf OR ext:rtf OR ext:sxw OR ext:psw OR ext:ppt OR ext:pptx OR ext:pps OR ext:csv OR ext:txt OR ext:html site:\"hs3x.com\" intext:\"+XXXXXXXXX\" site:signal-arnaques.com intext:\"XXXXXXXXX\" intitle:\" OR Phone Fraud\"","title":"Resources"},{"location":"resources/#resources","text":"","title":"Resources"},{"location":"resources/#inderstanding-phone-numbers","text":"whitepages.fr/phonesystem Formatting-International-Phone-Numbers National_conventions_for_writing_telephone_numbers","title":"Inderstanding phone numbers"},{"location":"resources/#open-data","text":"api.ovh.com/console/#/telephony countrycode.org countryareacode.net directory.didww.com/area-prefixes numinfo.net gist.github.com/Goles/3196253","title":"Open data"},{"location":"resources/#footprinting","text":"Both free and premium resources are included. Be careful, the listing of a data source here does not mean it has been verified or is used in the tool. Data might be false. Use it as an OSINT framework.","title":"Footprinting"},{"location":"resources/#reputation-fraud","text":"scamcallfighters.com signal-arnaques.com whosenumber.info findwhocallsme.com yellowpages.ca phonenumbers.ie who-calledme.com usphonesearch.net whocalled.us quinumero.info","title":"Reputation / fraud"},{"location":"resources/#disposable-numbers","text":"receive-sms-online.com receive-sms-now.com hs3x.com twilio.com freesmsverification.com freeonlinephone.org sms-receive.net smsreceivefree.com receive-a-sms.com receivefreesms.com freephonenum.com receive-smss.com receivetxt.com temp-mails.com receive-sms.com receivesmsonline.net receivefreesms.com sms-receive.net pinger.com (=> textnow.com) receive-a-sms.com k7.net kall8.com faxaway.com receivesmsonline.com receive-sms-online.info sellaite.com getfreesmsnumber.com smsreceiving.com smstibo.com catchsms.com freesmscode.com smsreceiveonline.com smslisten.com sms.sellaite.com smslive.co","title":"Disposable numbers"},{"location":"resources/#individuals","text":"Facebook Twitter Instagram Linkedin True People Fast People Background Check Pipl Spytox Makelia IvyCall PhoneSearch 411 USPhone WP Plus Thats Them True Caller Sync.me WhoCallsMe ZabaSearch DexKnows WeLeakInfo OK Caller SearchBug numinfo.net","title":"Individuals"},{"location":"resources/#google-dork-examples","text":"insubject:\"+XXXXXXXXX\" OR insubject:\"+XXXXX\" OR insubject:\"XXXXX XXX XXX\" insubject:\"XXXXXXXXX\" OR intitle:\"XXXXXXXXX\" intext:\"XXXXXXXXX\" ext:doc OR ext:docx OR ext:odt OR ext:pdf OR ext:rtf OR ext:sxw OR ext:psw OR ext:ppt OR ext:pptx OR ext:pps OR ext:csv OR ext:txt OR ext:html site:\"hs3x.com\" intext:\"+XXXXXXXXX\" site:signal-arnaques.com intext:\"XXXXXXXXX\" intitle:\" OR Phone Fraud\"","title":"Google dork examples"},{"location":"usage/","text":"$ python3 phoneinfoga.py -h usage: phoneinfoga.py -n <number> [options] Advanced information gathering tool for phone numbers (https://github.com/sundowndev/PhoneInfoga) version v1.6.8 optional arguments: -h, --help show this help message and exit -n number, --number number The phone number to scan (E164 or international format) -i input_file, --input input_file Phone number list to scan (one per line) -o output_file, --output output_file Output to save scan results -s scanner, --scanner scanner The scanner to use --recon Launch custom format reconnaissance --no-ansi Disable colored output -v, --version Show tool version Basic scan python3 phoneinfoga.py -n \"(+42) 837544833\" Country code and special chars such as ( ) - + will be escaped so typing US-based numbers stay easy : python3 phoneinfoga.py -n \"+1 555-444-3333\" Note that the country code is essential. You don't know which country code to use ? Find it here Output file Check several numbers at once and send results to a file. Optionally, ensure no color code is used with --no-ansi python3 phoneinfoga.py -i numbers.txt -o results.txt --no-ansi Input file must contain one phone number per line. Invalid numbers will be skipped. Footprinting python3 phoneinfoga.py -n +42837544833 -s footprints Custom format reconnaissance You don't know where to search and what custom format to use ? Let the tool try several custom formats based on the country code for you. python3 phoneinfoga.py -n +42837544833 -s any --recon Available scanners Use any to disable this feature. Default value: all numverify ovh footprints Numverify provide standard but useful informations such as number's country code, location, line type and carrier. OVH is, besides being a web and cloud hosting company, a telecom provider with several VoIP numbers in the Europe. Thanks to their API-key free REST API , we are able to tell if a number is owned by OVH Telecom or not. Footprints scanner uses Google search engine and Google Dorks to search phone number's footprints everywhere on the web. It allows you to search for scam reports, social media profiles, documents and more. Examples Check for a number range on OVH : python3 phoneinfoga.py -n \"+33 01 88 33 40 32\" -s ovh Output : [!] ---- Fetching informations for 330188334032 ---- [!] [*] Running local scan... [+] International format: +33 1 88 33 40 32 [+] Local format: 188334032 [+] Country found: France (+33) [+] City/Area: France [+] Carrier: [+] Timezone: Europe/Paris [i] The number is valid and possible. [*] Running OVH scan... [+] 1 result found in OVH database [+] Number range: 018833xxxx [+] City: Paris [+] Zip code: Continue scanning ? (y/N) [i] Good bye!","title":"Basic usage"},{"location":"usage/#basic-scan","text":"python3 phoneinfoga.py -n \"(+42) 837544833\" Country code and special chars such as ( ) - + will be escaped so typing US-based numbers stay easy : python3 phoneinfoga.py -n \"+1 555-444-3333\" Note that the country code is essential. You don't know which country code to use ? Find it here","title":"Basic scan"},{"location":"usage/#output-file","text":"Check several numbers at once and send results to a file. Optionally, ensure no color code is used with --no-ansi python3 phoneinfoga.py -i numbers.txt -o results.txt --no-ansi Input file must contain one phone number per line. Invalid numbers will be skipped.","title":"Output file"},{"location":"usage/#footprinting","text":"python3 phoneinfoga.py -n +42837544833 -s footprints","title":"Footprinting"},{"location":"usage/#custom-format-reconnaissance","text":"You don't know where to search and what custom format to use ? Let the tool try several custom formats based on the country code for you. python3 phoneinfoga.py -n +42837544833 -s any --recon","title":"Custom format reconnaissance"},{"location":"usage/#available-scanners","text":"Use any to disable this feature. Default value: all numverify ovh footprints Numverify provide standard but useful informations such as number's country code, location, line type and carrier. OVH is, besides being a web and cloud hosting company, a telecom provider with several VoIP numbers in the Europe. Thanks to their API-key free REST API , we are able to tell if a number is owned by OVH Telecom or not. Footprints scanner uses Google search engine and Google Dorks to search phone number's footprints everywhere on the web. It allows you to search for scam reports, social media profiles, documents and more.","title":"Available scanners"},{"location":"usage/#examples","text":"Check for a number range on OVH : python3 phoneinfoga.py -n \"+33 01 88 33 40 32\" -s ovh Output : [!] ---- Fetching informations for 330188334032 ---- [!] [*] Running local scan... [+] International format: +33 1 88 33 40 32 [+] Local format: 188334032 [+] Country found: France (+33) [+] City/Area: France [+] Carrier: [+] Timezone: Europe/Paris [i] The number is valid and possible. [*] Running OVH scan... [+] 1 result found in OVH database [+] Number range: 018833xxxx [+] City: Paris [+] Zip code: Continue scanning ? (y/N) [i] Good bye!","title":"Examples"}]}